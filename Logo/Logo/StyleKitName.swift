//
//  StyleKitName.swift
//  Logo
//
//  Created by Chris Gonzales on 2/19/20.
//  Copyright Â© 2020 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class StyleKitName : NSObject {

    //// Cache

    private struct Cache {
        static let green: UIColor = UIColor(red: 0.243, green: 0.783, blue: 0.000, alpha: 1.000)
        static let color2: UIColor = UIColor(red: 0.845, green: 0.757, blue: 0.095, alpha: 1.000)
        static let gradient: CGGradient = CGGradient(colorsSpace: nil, colors: [StyleKitName.green.cgColor, StyleKitName.green.blended(withFraction: 0.5, of: StyleKitName.color2).cgColor, StyleKitName.color2.cgColor] as CFArray, locations: [0, 0.23, 1])!
        static let shadow: NSShadow = NSShadow(color: UIColor.black.withAlphaComponent(0.6), offset: CGSize(width: 14, height: 4), blurRadius: 5)
    }

    //// Colors

    @objc dynamic public class var green: UIColor { return Cache.green }
    @objc dynamic public class var color2: UIColor { return Cache.color2 }

    //// Gradients

    @objc dynamic public class var gradient: CGGradient { return Cache.gradient }

    //// Shadows

    @objc dynamic public class var shadow: NSShadow { return Cache.shadow }

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 202, height: 202), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 202, height: 202), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 202, y: resizedFrame.height / 202)


        //// Color Declarations
        let greenBackground = UIColor(red: 0.239, green: 0.784, blue: 0.000, alpha: 0.282)
        let blue = UIColor(red: 0.320, green: 0.488, blue: 0.800, alpha: 1.000)
        let orange = UIColor(red: 0.896, green: 0.368, blue: 0.196, alpha: 1.000)

        //// Gradient Declarations
        let gradient2 = CGGradient(colorsSpace: nil, colors: [blue.cgColor, blue.blended(withFraction: 0.5, of: orange).cgColor, orange.cgColor] as CFArray, locations: [0, 0.6, 1])!

        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 106.5, y: 37.5))
        bezier6Path.addLine(to: CGPoint(x: 130.5, y: 84.5))
        bezier6Path.addLine(to: CGPoint(x: 106.5, y: 37.5))
        bezier6Path.close()
        UIColor.black.setFill()
        bezier6Path.fill()
        UIColor.black.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 105.5, y: 37.5))
        bezier5Path.addLine(to: CGPoint(x: 119.5, y: 127.5))
        bezier5Path.addLine(to: CGPoint(x: 105.5, y: 37.5))
        bezier5Path.close()
        UIColor.black.setFill()
        bezier5Path.fill()
        UIColor.black.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 67.5, y: 114.5))
        bezier4Path.addLine(to: CGPoint(x: 105.5, y: 37.5))
        bezier4Path.addLine(to: CGPoint(x: 67.5, y: 114.5))
        bezier4Path.close()
        UIColor.black.setFill()
        bezier4Path.fill()
        UIColor.black.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 55.5, y: 75.5))
        bezier3Path.addLine(to: CGPoint(x: 154.5, y: 109.5))
        bezier3Path.addLine(to: CGPoint(x: 55.5, y: 75.5))
        bezier3Path.close()
        UIColor.black.setFill()
        bezier3Path.fill()
        UIColor.black.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 53.5, y: 77.5))
        bezier2Path.addLine(to: CGPoint(x: 153.5, y: 43.5))
        bezier2Path.addLine(to: CGPoint(x: 53.5, y: 77.5))
        bezier2Path.close()
        UIColor.black.setFill()
        bezier2Path.fill()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 61.5, y: 31.5))
        bezierPath.addCurve(to: CGPoint(x: 53.5, y: 77.5), controlPoint1: CGPoint(x: 56.5, y: 71.5), controlPoint2: CGPoint(x: 53.5, y: 77.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Group 2
        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 40, y: 3, width: 116, height: 143))
        greenBackground.setFill()
        rectangle6Path.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 156, y: 14, width: 16, height: 123))
        greenBackground.setFill()
        rectangle2Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 172, y: 67, width: 16, height: 17))
        greenBackground.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 27, y: 17, width: 13, height: 119))
        greenBackground.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 14, y: 67, width: 13, height: 17))
        greenBackground.setFill()
        rectangle9Path.fill()




        //// Group
        //// Text Drawing
        let textRect = CGRect(x: 0, y: 0, width: 83, height: 158)
        let textTextContent = "{"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 170),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + textRect.height - textTextHeight, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 148, y: 0, width: 55, height: 158)
        let text2TextContent = "}"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .right
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 170),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + text2Rect.height - text2TextHeight, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()




        //// Text 3 Drawing
        let text3Rect = CGRect(x: 0, y: 146, width: 202, height: 33)
        let text3TextContent = "Coding Geek"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "MarkerFelt-Wide", size: 28.5)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 56, y: 178, width: 101, height: 23)
        let text4TextContent = "a C.G. Development Company"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Zapfino", size: 5)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 55, y: 26, width: 12, height: 12), cornerRadius: 2)
        blue.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 41, y: 64, width: 26, height: 26), cornerRadius: 2)
        context.saveGState()
        rectangle3Path.addClip()
        context.drawRadialGradient(gradient2,
            startCenter: CGPoint(x: 43.13, y: 58.81), startRadius: 1.22,
            endCenter: CGPoint(x: 48.7, y: 82.3), endRadius: 31.78,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 148, y: 38, width: 11, height: 11), cornerRadius: 2)
        orange.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 148, y: 103, width: 12, height: 12), cornerRadius: 2)
        orange.setFill()
        rectangle5Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 61, y: 109, width: 12, height: 12))
        StyleKitName.green.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 125, y: 78, width: 12, height: 12))
        StyleKitName.green.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 93, y: 23, width: 26, height: 26))
        context.saveGState()
        oval3Path.addClip()
        context.drawRadialGradient(StyleKitName.gradient,
            startCenter: CGPoint(x: 100.32, y: 15.67), startRadius: 3.55,
            endCenter: CGPoint(x: 100.7, y: 41.3), endRadius: 31.78,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 113, y: 121, width: 12, height: 12))
        StyleKitName.color2.setFill()
        oval4Path.fill()
        
        context.restoreGState()

    }




    @objc(StyleKitNameResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}



private extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
